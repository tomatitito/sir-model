Starting REPL with lein in /home/dusty/hlrs/dev-clojure/sir-modell
nREPL server started on port 36771 on host 127.0.0.1 - nrepl://127.0.0.1:36771
Refreshing code...
:reloading (anglican-code.prob_functions clojure-code.functions sir-modell.core sir-modell.core-test)
Refresh complete
(ns sir-modell.core
  (:gen-class)
  (:require [clojure.java.io :as io]
            [clojure.data.csv :as csv])
  (:use [anglican
         [core :exclude [-main]]
         runtime
         emit
         stat]
        anglican-code.prob_functions
        clojure-code.functions))
sir-modell.core=>
nil
(ns anglican-code.prob_functions
  (:use [anglican
         [core :exclude [-main]]
         runtime
         emit
         stat]))
anglican-code.prob_functions=>
nil
(defm incidence-over-time [ [I R mean-duration dat-out maxtime]]
  (if (= maxtime 0) dat-out
    (let
      ;Anteil von gesundeten haengt mit durchschnittlicher Krankheitsdauer zusammen:
      ;new-R = 1/mean-dur * I + old-R
      [ new-R ((fn [infected recovered] (+ recovered (* (/ 1 (+ (sample (poisson 4)) 1)) infected))) I R)]
      (incidence-over-time [(max (- I new-R) 0)
                            new-R
                            mean-duration
                            (conj dat-out new-R)
                            (- maxtime 1)]))))
anglican-code.prob_functions=>
#'anglican-code.prob_functions/incidence-over-time
(defm change-in-R [[I mean-dur]]
  (* (/ 1 mean-dur) I))
anglican-code.prob_functions=>
#'anglican-code.prob_functions/change-in-R
(defm S
  "S represents the number of suceptibles in a given Population of size N.
  It is coneptualized as a binomially distributed random variable with success
  or better hit rate p."
  [[N p]]
  (sample (binomial N p)))
anglican-code.prob_functions=>
#'anglican-code.prob_functions/S
(defm negative-binomial
  "Negative binomial distribution for number of trials until r-th success."
  [[r p trials hits]]
  (if
    (= hits r) trials
    (negative-binomial [r p (inc trials) (+ hits (sample (bernoulli p)))])))
anglican-code.prob_functions=>
#'anglican-code.prob_functions/negative-binomial
(defm encounters
  "Susceptible individuals don't neccesarily encounter infected individuals. The number
  of encounters is conceptualized as a binomial variable with parameters susceptible and ratio of already infected to non-susceptible population."
  [[susceptible proportion-infected]]
  (sample (binomial susceptible proportion-infected)))
anglican-code.prob_functions=>
#'anglican-code.prob_functions/encounters
(defm S2I
  "Computes number of susceptibles who become infected (for a given timestep which is
  not yet coded into the model). So this is incidence. Conceptualized as a binomially
  distributed random variable with parameters for number of susceptibles and transmission
  rate"
  [[susceptibles transmission-rate]]
  (sample (binomial susceptibles transmission-rate)))
anglican-code.prob_functions=>
#'anglican-code.prob_functions/S2I
(defm multinom-recursive [[n prob-vector out-vector]]
  "Takes the size of sample, a list of probabilities and an empty vector. Returns that
  vector with a sample from corresponding multinomial distribution. Probabilities have
  to sum to one."
  (if (empty? (rest prob-vector))
    (conj out-vector n)
    (let [hits (sample (binomial n (first prob-vector)))]
      (multinom-recursive [(- n hits) (rest prob-vector) (conj out-vector hits)]))))
anglican-code.prob_functions=>
#'anglican-code.prob_functions/multinom-recursive
(defm multinomial [[n probabilities]]
  "Wrapper around multinom-recursive."
   (multinom-recursive [n probabilities []]))
anglican-code.prob_functions=>
#'anglican-code.prob_functions/multinomial
(defm I2R
  "As time progresses, with each unit of time a certain number of infected recover. The
  first entry in list-of-probabilities is the probability that an individual recovers
  1 day (or unit of time), the second entry is the probability for recovering after 2 days
  etc."
  [list-of-probabilities]
  (let [
        nParams (count list-of-probabilities)
        categories (range 1 nParams)]
    categories))
anglican-code.prob_functions=>
#'anglican-code.prob_functions/I2R
(defn -main
  "Probabilistisches SIR-Modell"
  [& args]
  ;;--------------------------------------------NEUER VERSUCH-----------------------------------
  ;(defquery sir-modell []
  ;  (let [
  ;        mean-duration (+ 1 (sample (poisson 4 )))
  ;        I (sample(beta 3000 6000))
  ;        R (sample (beta 6000 3000))
  ;        Infections (incidence-over-time [I R mean-duration [R] 10])
  ;        ]
  ;    ;(println Infections)
  ;    (println (change-in-R [I (+  1(sample (poisson 5)))]))
  ;    (println ["new-R: " (sample(poisson (+ R (change-in-R [I mean-duration]))))])
  ;    (println (sample (poisson 3.46)))
  ;    ;{:R R  :dur mean-duration}
  ;    )
  ;  )

  ;(def res (take 50 (doquery :lmh sir-modell nil)))
  ;
  ;;(write-to-file res :R "data/results.dat")
  ;---------------------------------------------------------------------------------------------

  (defquery sir []
    (let
      [susceptible (S [700000 0.3])
       infected (S2I [susceptible 0.3])
       neg-bin (negative-binomial [10 0.4 0 0])
       enc (encounters [10 0.4])
      ;course (I2R [1 2 3])]
       multi (multinomial [10 1/3 1/3 1/3])]

      {:S susceptible, :I infected :nb neg-bin :enc enc, :multi multi}))



  (def res (take 5 (doquery :lmh sir nil)))
  (println res))
sir-modell.core=>
#'sir-modell.core/-main
(println res)
#object[clojure.lang.Var$Unbound 0x547b899d Unbound: #'sir-modell.core/res]
sir-modell.core=>
nil
(def res (take 5 (doquery :lmh sir nil)))
CompilerException java.lang.IllegalStateException: Attempting to call unbound fn: #'sir-modell.core/sir, compiling:(form-init801612211385768382.clj:50:20) 
(defquery sir []
    (let
      [susceptible (S [700000 0.3])
       infected (S2I [susceptible 0.3])
       neg-bin (negative-binomial [10 0.4 0 0])
       enc (encounters [10 0.4])
      ;course (I2R [1 2 3])]
       multi (multinomial [10 1/3 1/3 1/3])]

      {:S susceptible, :I infected :nb neg-bin :enc enc, :multi multi}))
sir-modell.core=>
#'sir-modell.core/sir
(def res (take 5 (doquery :lmh sir nil)))
CompilerException java.lang.IllegalArgumentException: Don't know how to create ISeq from: clojure.lang.Ratio, compiling:(form-init801612211385768382.clj:50:20) 
(println res)
#object[clojure.lang.Var$Unbound 0x547b899d Unbound: #'sir-modell.core/res]
sir-modell.core=>
nil
Loading File /home/dusty/hlrs/dev-clojure/sir-modell/src/anglican_code/prob_functions.clj
sir-modell.core=>
#'anglican-code.prob_functions/I2R
Loading File /home/dusty/hlrs/dev-clojure/sir-modell/src/anglican_code/prob_functions.clj
sir-modell.core=>
#'anglican-code.prob_functions/I2R
Loading File /home/dusty/hlrs/dev-clojure/sir-modell/src/anglican_code/prob_functions.clj
sir-modell.core=>
#'anglican-code.prob_functions/I2R
Loading File /home/dusty/hlrs/dev-clojure/sir-modell/src/sir_modell/core.clj
sir-modell.core=>
#'sir-modell.core/-main
(-main)
IllegalArgumentException Don't know how to create ISeq from: clojure.lang.Ratio  clojure.lang.RT.seqFrom (RT.java:542)
Loading File /home/dusty/hlrs/dev-clojure/sir-modell/src/sir_modell/core.clj
sir-modell.core=>
#'sir-modell.core/-main
(-main)
IllegalArgumentException Don't know how to create ISeq from: clojure.lang.Ratio  clojure.lang.RT.seqFrom (RT.java:542)
[]
sir-modell.core=>
[]
(defn -main
  "Probabilistisches SIR-Modell"
  [& args]
  ;;--------------------------------------------NEUER VERSUCH-----------------------------------
  ;(defquery sir-modell []
  ;  (let [
  ;        mean-duration (+ 1 (sample (poisson 4 )))
  ;        I (sample(beta 3000 6000))
  ;        R (sample (beta 6000 3000))
  ;        Infections (incidence-over-time [I R mean-duration [R] 10])
  ;        ]
  ;    ;(println Infections)
  ;    (println (change-in-R [I (+  1(sample (poisson 5)))]))
  ;    (println ["new-R: " (sample(poisson (+ R (change-in-R [I mean-duration]))))])
  ;    (println (sample (poisson 3.46)))
  ;    ;{:R R  :dur mean-duration}
  ;    )
  ;  )

  ;(def res (take 50 (doquery :lmh sir-modell nil)))
  ;
  ;;(write-to-file res :R "data/results.dat")
  ;---------------------------------------------------------------------------------------------

  (defquery sir []
    (let
      [susceptible (S [700000 0.3])
       infected (S2I [susceptible 0.3])
       neg-bin (negative-binomial [10 0.4 0 0])
       enc (encounters [10 0.4])
      ;course (I2R [1 2 3])]
       multi (multinomial [10 [1/3 1/3 1/3]])]

      {:S susceptible, :I infected :nb neg-bin :enc enc, :multi multi}))



  (def res (take 5 (doquery :lmh sir nil)))
  (println res))
sir-modell.core=>
#'sir-modell.core/-main
(println res)
#object[clojure.lang.Var$Unbound 0x547b899d Unbound: #'sir-modell.core/res]
sir-modell.core=>
nil
(-main)
({:log-weight 0.0, :result {:S 210474, :I 63365, :nb 34, :enc 5, :multi [2 4 4]}, :predicts []} {:log-weight 0.0, :result {:S 210474, :I 63365, :nb 33, :enc 5, :multi [2 4 4]}, :predicts []} {:log-weight 0.0, :result {:S 210479, :I 63365, :nb 33, :enc 5, :multi [2 4 4]}, :predicts []} {:log-weight 0.0, :result {:S 210479, :I 63365, :nb 33, :enc 5, :multi [2 4 4]}, :predicts []} {:log-weight 0.0, :result {:S 210479, :I 63365, :nb 34, :enc 5, :multi [2 4 4]}, :predicts []})
sir-modell.core=>
nil
--------------------
(ns-interns)
